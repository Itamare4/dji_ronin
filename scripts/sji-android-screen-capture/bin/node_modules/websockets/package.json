{
  "name": "websockets",
  "description": "WebSocket Server & Client API",
  "version": "0.2.0",
  "author": {
    "name": "EastCloud",
    "email": "info@east-cloud.co.jp"
  },
  "repository": {
    "type": "git",
    "url": "https://EastCloud@github.com/EastCloud/node-websockets.git"
  },
  "main": "./lib/websockets/websockets",
  "engines": {
    "node": ">=0.4.10"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/EastCloud/node-websockets/blob/master/LICENSE.md"
    }
  ],
  "readme": "\nnode-websockets\n=\n\n##### Web Socket Server and Client API\n\n###### Support Protocols\n* [RFC 6455](http://tools.ietf.org/html/rfc6455)\n* [draft-ietf-hybi-thewebsocketprotocol-10](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-10)\n* [draft-ietf-hybi-thewebsocketprotocol-00](http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-00)\n\n\nInstall\n-\n\n    npm install websockets\n\n\nUsage\n-\n\nrequire `websockets`\n\n```js\nvar websockets = require(\"websockets\");\n\n```\n\n### _Server:_\nServer is a wrapper of `http/https` server.\n\n```js\n\n// http based server\nvar server = websockets.createServer();\nserver.on('connect', function(socket) {\n  socket.on('message', function(message) {\n    socket.send('echo a message:' + message);\n    ......\n  });\n}).listen(80);\n\n// https based server\nvar secure = websockets.createServer({\n  key: ssl_key,\n  cert: ssl_cert\n});\nsecure.on('connect', function(socket) {\n  ......\n}).listen(443);\n\n\n```\n\nExtended Servers such as [express](http://expressjs.com/) are also available.\n\n```js\n// In case of 'express'\nvar express = require('express');\n\nvar svr = express.createServer();\nsvr.get('/', function(req, res) {\n  ......\n});\nsvr.configure(function() {\n  ......\n});\n\nvar server = websockets.createServer({\n  server: svr\n});\nserver.on('connect', function(socket) {\n  socket.on('message', function(message) {\n    socket.send('echo a message:' + message);\n    ......\n  });\n}).listen(80);\n\n```\n\n\n### _Client:_\nClient has the interfaces like [html5 WebSocket](http://www.w3.org/TR/2011/WD-websockets-20110419/).\n\n```js\nvar socket = new websockets.WebSocket('wss://127.0.0.1');\nsocket.on('open', function() {\n  socket.send('a message');\n  ......\n});\n\n```\n\nAPIs\n-\n\n### websockets.Server\n\n<br/>\n\n#### Event: 'connect'\n__`function (socket) {}`__\n\nEmitted when client-server opening handshake has succeeded. `socket` is an instance of `WebSocket`.\n  \n<br/>\n\n#### server.broadcast(string)\nNot Implemented.\nSends `string` to all clients connected with `server`.\n\n<br/>\n\n#### server.broadcast(buffer)\nNot Implemented.\nSends binary data(`buffer`) to all clients connected with `server`.\n\n<br/>\n\n### websockets.WebSocket\n\n<br/>\n\n#### Event: 'open'\n__`function () {}`__\n\nEmitted when a client-server connection is successfully established.\n\n<br/>\n\n#### Event: 'message'\n__`function (data) {}`__\n\nEmitted when the socket has received a message. The type of `data` is either `string`(string data) or `Buffer`(binary data).\n\n<br/>\n\n#### Event: 'error'\n__`function (exception) {}`__\n\nEmitted on error. `exception` is an instance of Error.\n\n<br/>\n\n#### Event: 'close'\n__`function () {}`__\n\nEmitted when a client-server connection has closed.\n\n<br/>\n\n#### socket.send(string)\nSends `string` to the other endpoint.\n\n<br/>\n\n#### socket.send(buffer)\nSends binary data(`buffer`) to the other endpoint.\n\n<br/>\n\n#### socket.close()\nSends a connection close request to the other endpoint.\n\n<br/>\nTODO\n=\n* implementation of server broadcast\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/EastCloud/node-websockets/issues"
  },
  "_id": "websockets@0.2.0",
  "_from": "websockets@"
}
