//Let json file support C style //comment... and single line /*comment*/ style comment.
//Do not worry: Double quoted string is safe and will not be corrupted by comment char.
/*
 [Usage]
 var jsonFile = require('./common/jsonFile.js');
 var json = jsonFile.parse('file.json');
 the result "json" will be null when failed to read or parse file.
 jsonFile.getLastError() will indicate error message.
 */
'use strict';
var fs = require('fs');

var lastError = '';

function removeComments(s) {
  var strAry = [];
  //replace cross-line string with \0str{number}
  s = s.replace(/"(?:\\"|[^"])*"/g, function (match) {
    strAry.push(match);
    return '\0str{' + (strAry.length - 1) + '}';
  });

  //remove cross-line /*comment*/ style comment. [\s\S] means any char, include \0
  s = s.replace(/\/\*[\s\S]*\*\//g, '');

  //remove in-line //comment style comment
  s = s.replace(/\/\/.*$/gm, '');

  //restore string placeholder
  s = s.replace(/\0str{(\d+)}/g, function (match, capture1) {
    return strAry[capture1];
  });
  return s;
}

function parse(filePath) {
  var buf;
  try {
    buf = fs.readFileSync(filePath);
  }
  catch (e) {
    lastError = 'failed to open JSON file. ' + e;
    return null;
  }

  //empty file is ok
  if (buf.length === 0) {
    return {};
  }

  var s = buf.toString();

  //remove //comment or /*comment*/
  s = removeComments(s).trim();

  //empty file is ok
  if (s.length === 0) {
    return {};
  }

  try {
    return JSON.parse(s);
  }
  catch (e) {
    lastError = 'failed to parse JSON file. ' + e;
    return null;
  }
}

function getLastError() {
  return lastError;
}

exports.parse = parse;
exports.getLastError = getLastError;